export declare function useRender({ target, beforeRender, afterRender }: {
    target: string;
    beforeRender?: () => any;
    afterRender?: () => any;
}): {
    isRendering: import("vue").ComputedRef<any>;
    message: import("vue").ComputedRef<any>;
    start: () => Promise<void>;
    status: () => Promise<void>;
    isFinished: import("vue").Ref<boolean>;
    statusCode: import("vue").Ref<number | null>;
    response: import("vue").Ref<Response | null>;
    error: import("vue").Ref<any>;
    data: import("vue").Ref<any>;
    isFetching: import("vue").Ref<boolean>;
    canAbort: import("vue").ComputedRef<boolean>;
    aborted: import("vue").Ref<boolean>;
    abort: import("@vueuse/shared").Fn;
    execute: (throwOnFailed?: boolean | undefined) => Promise<any>;
    onFetchResponse: import("@vueuse/shared").EventHookOn<Response>;
    onFetchError: import("@vueuse/shared").EventHookOn<any>;
    onFetchFinally: import("@vueuse/shared").EventHookOn<any>;
    get(): import("@vueuse/core").UseFetchReturn<any>;
    post(payload?: unknown, type?: string | undefined): import("@vueuse/core").UseFetchReturn<any>;
    put(payload?: unknown, type?: string | undefined): import("@vueuse/core").UseFetchReturn<any>;
    delete(payload?: unknown, type?: string | undefined): import("@vueuse/core").UseFetchReturn<any>;
    patch(payload?: unknown, type?: string | undefined): import("@vueuse/core").UseFetchReturn<any>;
    head(payload?: unknown, type?: string | undefined): import("@vueuse/core").UseFetchReturn<any>;
    options(payload?: unknown, type?: string | undefined): import("@vueuse/core").UseFetchReturn<any>;
    json<JSON_1 = any>(): import("@vueuse/core").UseFetchReturn<JSON_1>;
    text(): import("@vueuse/core").UseFetchReturn<string>;
    blob(): import("@vueuse/core").UseFetchReturn<Blob>;
    arrayBuffer(): import("@vueuse/core").UseFetchReturn<ArrayBuffer>;
    formData(): import("@vueuse/core").UseFetchReturn<FormData>;
};
